-----------------
Git/GitHub
-----------------
Gitをインストールしたら真っ先にやっておくべき初期設定
https://qiita.com/wnoguchi/items/f7358a227dfe2640cce3

# nanoからvimに変更
git config --global core.editor 'vim -c "set fenc=utf-8"'

GitHubでユーザ名・パスワード省略
https://qiita.com/azusanakano/items/8dc1d7e384b00239d4d9#1-clone%E6%B8%88%E3%81%AE%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88


$ vim ~/.netrc
   
   machine github.com
   login username
   password xxxxxxx

$ vim .git/config

[remote "origin"]
  url = https://username:password@github.com/username/repository.git



# グローバル設定（デフォルトの設定）
git config --global user.name "user_name"
git config --global user.email "user_email"

# 設定の確認
git config --global -l

# 現在のワークツリーとインデックスの状況確認
git status

# バージョン管理の流れ
# 1,リポジトリの作成（初期化）
git init

# ファイルの変更
# 3,ファイルの変更箇所のステージ
git add ファイル名

# 4,コミット
git commit

# nanoを立ち上げないでコメント
git commit -m "コメント"

# コミット履歴の確認
git log

# 前回のコミットとの差分を確認
git diff



コマンドまとめ
-----------------------------------
git init	現在のフォルダ内にリポジトリを作成し、ワークツリーとインデックスを用意する。
git add ファイル名	新規追加や変更されたファイルを選択し、ステージさせる。
git commit	ステージされた変更をコミットする。git commit -m 'message'でも良い。
git status	ワークツリーとインデックスの状況をファイル単位で確認する。
git diff	ワークツリーとインデックスを比較して、その差分を表示する。
git log	過去のコミット履歴を確認する。
-----------------------------------


# GitHubへ反映
# GitHubへリポジトリを反映するための一連の流れ

# 1,GitHubにリモートリポジトリを作成する
「Repository name」に入力
# 2,ローカルリポジトリにリモートリポジトリを登録する
git remote add origin　URL

# リモートリポジトリの登録状況を確認
git remote -v

# 3,登録したリモートリポジトリへプッシュする
git push -u origin master

# 4,GitHubのリモートリポジトリにプッシュされたか確認する
ブラウザにてhttps://github.com/michikong0615/「Repository name」

まとめ
-----------------------------------
git remote add origin リモートリポジトリURL	ローカルリポジトリにリモートリポジトリを登録する
git remote -v	ローカルリポジトリに登録されたリモートリポジトリの一覧を表示する
git push origin master	登録したリモートリポジトリへプッシュする
-----------------------------------

GitHubにpushした後にコメントの変更

# コミット履歴
git log --oneline
   481575b (HEAD -> master, origin/master) GitHubに反映
   f04a9ca 復習←ここを変えたい
   2ef02db first commit

# コミットコメントを変更したいコミットの１つ直前のコミットを引数を指定
git rebase -i 2ef02db

nanoにてコメント変更するコミットに「edit」を指定する
control+Xの後にEnterで終了

# 指定したコミットのコミットコメントを修正
git commit --amend
一個前のコミットコメントを修正
git commit --amend -m '新しいコメント'

# コミットコメントの修正
git rebase --continue

# コメントを修正した場合の強制
git push -f [repository] [branch]

https://qiita.com/ykawakami/items/71b462057a8d714d7382#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%83%BC%E3%81%AB%E5%86%8Dpush%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95
